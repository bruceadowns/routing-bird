#!/bin/bash

source $(cd $(dirname $0); pwd)/common;

source $ENV_CONFIG;

function ensure_swap() {
    SWAPPINESS=`cat /proc/sys/vm/swappiness`
    if [ "${SWAPPINESS}" -gt 0 ]; then
        echo "Swappiness out of bounds: Expected 0"
        echo "	Swappiness: ${SWAPPINESS}"
        exit 1
    fi
}

function ensure_ulimits() {
    SOFT_FILE_LIMIT=$(ulimit -Sn)
    HARD_FILE_LIMIT=$(ulimit -Hn)

    if [ "${SOFT_FILE_LIMIT}" -lt 100000 ] || [ "${HARD_FILE_LIMIT}" -lt 100000 ]; then
        echo "File limits too low:"
        echo "	Soft: ${SOFT_FILE_LIMIT}"
        echo "	Soft: ${HARD_FILE_LIMIT}"
        exit 1
    fi
    echo "ulimits ok! soft=${SOFT_FILE_LIMIT} hard=${HARD_FILE_LIMIT}"
}

#inheriting -D options from env
ENV_DASH_D_PROPS="";
function build_dash_d_properties {
    local PROP="";
    for PROP in $(env | grep SPO_) ; do
        ENV_DASH_D_PROPS="${ENV_DASH_D_PROPS} -D${PROP}"
    done
}

function start_service() {
    echo "starting serviceNamed="$SERVICE_NAME

    if [ -d $DEPLOYED_NEWRELIC_DIR ]; then
    	# this check can be improved to get latest version as opposed to any version, but it should noy happen that more than one version exists
    	NEWRELIC_JAR=`/bin/ls -l $DEPLOYED_NEWRELIC_DIR/newrelic-*.jar 2>/dev/null | awk '{print $9}' | head -1`
    	if [ -n ${NEWRELIC_JAR} ]; then
            NEWRELIC_PARAM="-javaagent:${NEWRELIC_JAR}"
        fi
    fi

    DATE_SUFFIX="-$(/bin/date +%Y-%m-%d_%H%M%S)"

    echo "/-------------------------------------------------------------------" >> ${LOG_PATH}/stdout.log
    echo "| starting service ${SERVICE_NAME}" >> ${LOG_PATH}/stdout.log
    echo "| "`date` >> ${LOG_PATH}/stdout.log

    echo "| cd $APP_ROOT && nohup $JAVA_HOME/bin/java \
      -DserviceName=${SERVICE_NAME} \
      $JAVA_LIBRARY_PATH_OPTS \
      -cp $(build_classpath) \
      ${ENV_DASH_D_PROPS} \
      ${JAVA_ADDITIONAL_DASH_X_OPTIONS} \
      -Xms${JAVA_XMS}m \
      -Xmx${JAVA_XMX}m \
      -server -ea -XX:+HeapDumpOnOutOfMemoryError \
      -XX:+DisableExplicitGC -XX:+PrintTenuringDistribution -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:${LOG_PATH}/gc${DATE_SUFFIX}.log -XX:OnOutOfMemoryError="${RUN_ON_OUT_OF_MEMORY}" \
      ${NEWRELIC_PARAM} \
      ${JAVA_ADDITIONAL_DASH_D_OPTIONS} \
      -Dcom.sun.management.jmxremote.port=${JMX_PORT} -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false \
      -Dlog4j.configuration=${LOG4J} -Dlog.dir=${LOG_PATH} -Dlog.name=service.log \
      -Xdebug -Xrunjdwp:transport=dt_socket,address=${DEBUG_PORT},server=y,suspend=n \
      ${JAVA_MAIN} ${MAIN_PROPERTIES} >> ${LOG_PATH}/stdout.log 2>&1 &" >> ${LOG_PATH}/stdout.log
    echo "\-------------------------------------------------------------------" >> ${LOG_PATH}/stdout.log

    # start java process
    cd $APP_ROOT && nohup $JAVA_HOME/bin/java \
      -DserviceName=${SERVICE_NAME} \
      $JAVA_LIBRARY_PATH_OPTS \
      -cp $(build_classpath) \
      ${ENV_DASH_D_PROPS} \
      ${JAVA_ADDITIONAL_DASH_X_OPTIONS} \
      -Xms${JAVA_XMS}m \
      -Xmx${JAVA_XMX}m \
      -server -ea -XX:+HeapDumpOnOutOfMemoryError \
      -XX:+DisableExplicitGC -XX:+PrintTenuringDistribution -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:${LOG_PATH}/gc${DATE_SUFFIX}.log -XX:OnOutOfMemoryError="${RUN_ON_OUT_OF_MEMORY}" \
      ${NEWRELIC_PARAM} \
      ${JAVA_ADDITIONAL_DASH_D_OPTIONS} \
      -Dcom.sun.management.jmxremote.port=${JMX_PORT} -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false \
      -Dlog4j.configuration=${LOG4J} -Dlog.dir=${LOG_PATH} -Dlog.name=service.log \
      -Xdebug -Xrunjdwp:transport=dt_socket,address=${DEBUG_PORT},server=y,suspend=n \
      com.jivesoftware.jive.hello.routing.bird.hello.echo.bird.deployable.Main ${MAIN_PROPERTIES} ${OVERLAY_MAIN_PROPERTIES} >> ${LOG_PATH}/stdout.log 2>&1 &

    echo "waiting for service ${SERVICE_NAME} to start..."
    sleep 2
    GIVE_UP=1
    IS_RUNNING=`ps -ef | grep "\-DserviceName="${SERVICE_NAME} | grep -v "grep " | wc -l`
    while [ $IS_RUNNING -eq 0  ]
    do
        sleep 1
        if [ $GIVE_UP -gt 5 ]; then
                echo "FAILED to start service ${SERVICE_NAME}"
                echo "Look at ${LOG_PATH}/stdout.log or ${LOG_PATH}/service.log to see why."
                cat ${LOG_PATH}/stdout.log
                exit 1
        fi
        GIVE_UP=$(($GIVE_UP + 1));
        IS_RUNNING=`ps -ef | grep "\-DserviceName="${SERVICE_NAME} | grep -v "grep " | wc -l`
        echo "${SERVICE_NAME} isnt running yet will check for the $GIVE_UP time in 1 seconds"
    done
    echo "SUCCESS started service ${SERVICE_NAME}"
    exit 0
}

exit_if_service_is_running;
#ensure_swap;
#ensure_ulimits;
build_dash_d_properties;
start_service;
